Design Principles:
Open Close Principle: classes should be open for extension but closed for modifications.
Dependency Inversion: High-level modules should not depend on low-level modules. IOC is an example
Interface Segregation: Subclasses should not be forced to implement interface methods that they don't use. 
Single Responsibility: A class should have only one responsibility to handle.
Liskov's Substitution: Derived types must be completely substitutable for their base types without changing base class behavior

Design Pattern Rules:
Program to an interface not to the implementation
Prefer composition over inheritance
Delegation responsibility4


Association/Aggregation/Composition
Association: 
public class Foo { 
    void Baz(Bar bar) {
    } 
};

Aggregation:
public class Foo { 
    private Bar bar; 
    Foo(Bar bar) { 
       this.bar = bar; 
    }
}

Composition:
public class Foo {
    private Bar bar = new Bar(); 
}
